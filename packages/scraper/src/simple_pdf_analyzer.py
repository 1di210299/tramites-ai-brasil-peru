#!/usr/bin/env python3
"""
Script simplificado para extraer informaci√≥n de los PDFs del usuario
"""

import os
import json
import PyPDF2
import pdfplumber
import re
from pathlib import Path
from datetime import datetime

def analyze_pdf_content(pdf_path):
    """Analizar contenido de un PDF espec√≠fico"""
    
    content_info = {
        'file_name': pdf_path.name,
        'pages': 0,
        'text_content': '',
        'procedures_found': [],
        'entities_mentioned': [],
        'document_type': 'unknown',
        'has_tables': False,
        'cost_info': []
    }
    
    try:
        # Leer con PyPDF2 para informaci√≥n b√°sica
        with open(pdf_path, 'rb') as file:
            pdf_reader = PyPDF2.PdfReader(file)
            content_info['pages'] = len(pdf_reader.pages)
            
            # Extraer texto de las primeras p√°ginas
            text_parts = []
            for i in range(min(3, len(pdf_reader.pages))):
                page_text = pdf_reader.pages[i].extract_text()
                if page_text:
                    text_parts.append(page_text)
            
            content_info['text_content'] = '\n'.join(text_parts)
    
    except Exception as e:
        print(f"   ‚ö†Ô∏è Error con PyPDF2: {e}")
    
    try:
        # An√°lisis detallado con pdfplumber
        with pdfplumber.open(pdf_path) as pdf:
            for page_num, page in enumerate(pdf.pages[:3]):  # Solo primeras 3 p√°ginas
                
                # Buscar tablas
                tables = page.find_tables()
                if tables:
                    content_info['has_tables'] = True
                
                # Extraer texto de la p√°gina
                page_text = page.extract_text()
                if page_text:
                    content_info['text_content'] += '\n' + page_text
    
    except Exception as e:
        print(f"   ‚ö†Ô∏è Error con pdfplumber: {e}")
    
    # An√°lisis del contenido extra√≠do
    text = content_info['text_content'].lower()
    
    # Detectar tipo de documento
    if 'tupa' in text:
        content_info['document_type'] = 'TUPA'
    elif 'tasas' in text or 'tarifa' in text:
        content_info['document_type'] = 'TASAS'
    elif 'manual' in text:
        content_info['document_type'] = 'MANUAL'
    elif 'reniec' in text:
        content_info['document_type'] = 'RENIEC'
    elif 'sunat' in text:
        content_info['document_type'] = 'SUNAT'
    elif 'mtc' in text:
        content_info['document_type'] = 'MTC'
    
    # Buscar entidades mencionadas
    entities = ['SUNAT', 'RENIEC', 'MTC', 'MIMP', 'MIDIS', 'MINEDU']
    for entity in entities:
        if entity.lower() in text:
            content_info['entities_mentioned'].append(entity)
    
    # Buscar informaci√≥n de procedimientos
    procedure_patterns = [
        r'procedimiento[^.]*',
        r'tr√°mite[^.]*',
        r'servicio[^.]*',
        r'solicitud[^.]*'
    ]
    
    for pattern in procedure_patterns:
        matches = re.findall(pattern, text, re.IGNORECASE)
        content_info['procedures_found'].extend(matches[:5])  # Solo primeros 5
    
    # Buscar informaci√≥n de costos
    cost_patterns = [
        r's/?\s*\d+\.?\d*',
        r'soles?\s*\d+',
        r'nuevos soles?\s*\d+',
        r'gratuito',
        r'sin costo'
    ]
    
    for pattern in cost_patterns:
        matches = re.findall(pattern, text, re.IGNORECASE)
        content_info['cost_info'].extend(matches[:10])  # Solo primeros 10
    
    return content_info

def main():
    """Funci√≥n principal"""
    
    print("üîç AN√ÅLISIS SIMPLIFICADO DE PDFs")
    print("=" * 50)
    
    docs_path = Path("/Users/juandiegogutierrezcortez/tramites-ai-brasil-peru/docs")
    
    if not docs_path.exists():
        print(f"‚ùå Directorio no encontrado: {docs_path}")
        return
    
    # Buscar PDFs
    pdf_files = list(docs_path.glob("*.pdf"))
    
    if not pdf_files:
        print("‚ùå No se encontraron archivos PDF")
        return
    
    print(f"üìÑ Encontrados {len(pdf_files)} archivos PDF")
    print("-" * 30)
    
    results = []
    
    for i, pdf_file in enumerate(pdf_files, 1):
        print(f"\n{i}. Procesando: {pdf_file.name}")
        
        try:
            size_mb = pdf_file.stat().st_size / (1024 * 1024)
            print(f"   üìä Tama√±o: {size_mb:.2f} MB")
            
            # Analizar contenido
            content_info = analyze_pdf_content(pdf_file)
            
            print(f"   üìñ P√°ginas: {content_info['pages']}")
            print(f"   üìë Tipo: {content_info['document_type']}")
            print(f"   üèõÔ∏è Entidades: {', '.join(content_info['entities_mentioned']) if content_info['entities_mentioned'] else 'No detectadas'}")
            print(f"   üìã Procedimientos encontrados: {len(content_info['procedures_found'])}")
            print(f"   üí∞ Info de costos: {len(content_info['cost_info'])}")
            print(f"   üìä Tablas: {'S√≠' if content_info['has_tables'] else 'No'}")
            
            results.append(content_info)
            print("   ‚úÖ Completado")
            
        except Exception as e:
            print(f"   ‚ùå Error: {e}")
    
    # Generar resumen
    print(f"\nüìä RESUMEN GENERAL")
    print("-" * 30)
    
    total_pages = sum(r['pages'] for r in results)
    total_procedures = sum(len(r['procedures_found']) for r in results)
    
    # Contar tipos de documento
    doc_types = {}
    all_entities = set()
    
    for result in results:
        doc_type = result['document_type']
        doc_types[doc_type] = doc_types.get(doc_type, 0) + 1
        all_entities.update(result['entities_mentioned'])
    
    print(f"üìÑ Total de PDFs procesados: {len(results)}")
    print(f"üìñ Total de p√°ginas: {total_pages}")
    print(f"üìã Total de procedimientos mencionados: {total_procedures}")
    print(f"üèõÔ∏è Entidades encontradas: {', '.join(sorted(all_entities))}")
    
    print(f"\nüìë Tipos de documento:")
    for doc_type, count in sorted(doc_types.items()):
        print(f"   ‚Ä¢ {doc_type}: {count} archivos")
    
    # PDFs m√°s informativos
    print(f"\n‚≠ê PDFs m√°s informativos:")
    sorted_results = sorted(results, key=lambda x: len(x['procedures_found']), reverse=True)
    
    for i, result in enumerate(sorted_results[:3], 1):
        print(f"   {i}. {result['file_name']}")
        print(f"      ‚Ä¢ {result['pages']} p√°ginas")
        print(f"      ‚Ä¢ {len(result['procedures_found'])} procedimientos")
        print(f"      ‚Ä¢ Tipo: {result['document_type']}")
    
    # Guardar resultados
    final_results = {
        'analysis_date': datetime.now().isoformat(),
        'summary': {
            'total_pdfs': len(results),
            'total_pages': total_pages,
            'total_procedures': total_procedures,
            'document_types': doc_types,
            'entities_found': sorted(list(all_entities))
        },
        'detailed_results': results
    }
    
    with open('pdf_analysis_simple.json', 'w', encoding='utf-8') as f:
        json.dump(final_results, f, ensure_ascii=False, indent=2)
    
    print(f"\n‚úÖ An√°lisis guardado en: pdf_analysis_simple.json")
    
    # Mostrar algunos procedimientos encontrados
    print(f"\nüìã EJEMPLOS DE PROCEDIMIENTOS ENCONTRADOS:")
    print("-" * 45)
    
    all_procedures = []
    for result in results:
        all_procedures.extend(result['procedures_found'])
    
    unique_procedures = list(set(all_procedures))[:10]
    
    for i, proc in enumerate(unique_procedures, 1):
        clean_proc = proc.strip()[:80]
        print(f"   {i:2d}. {clean_proc}")
    
    print(f"\nüéâ An√°lisis completado exitosamente!")

if __name__ == "__main__":
    main()
